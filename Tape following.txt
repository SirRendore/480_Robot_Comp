int left_vals[] = {0, 0, 0};
int right_vals[] = {0, 0, 0};
int mid_vals[] = {0, 0, 0};
int tape_index = 0;
int tape_speed = -350;
int tape_left = 0;
int tape_right = 0;
int tape_middle = 0;
int prev_tape[] = {0, 0, 0};
int prevSide = 0; // left: -1, right: 1
int error = 0;
int derivative = 0;
int integral = 0;
int prevError = 0;
int tape_thresholds[3]; // Calibrated threshold values
int tape_max[3];
bool tape_detected[] = {0, 0, 0};
double tape_pid[] = {25, 250, 0}; // kp, kd, ki
int speedInc = 0;

void tapeFollow(bool drive)
{
  // Read tape values - running average of last 3 values
  left_vals[tape_index] = analogRead(TAPE_LEFT);
  mid_vals[tape_index] = analogRead(TAPE_MIDDLE);
  right_vals[tape_index] = analogRead(TAPE_RIGHT);
  tape_index = (tape_index + 1) % 3;
  tape_left = (left_vals[0] + left_vals[1] + left_vals[2]) / 3;
  tape_middle = (mid_vals[0] + mid_vals[1] + mid_vals[2]) / 3;
  tape_right = (right_vals[0] + right_vals[1] + right_vals[2]) / 3;

  tape_detected[0] = tape_left > tape_thresholds[0];
  tape_detected[1] = tape_middle > tape_thresholds[1];
  tape_detected[2] = tape_right > tape_thresholds[2];

  // To left -> negative, to right -> postive
  if ((tape_detected[0] && tape_detected[1] && tape_detected[2]) ||
      (!tape_detected[0] && tape_detected[1] && !tape_detected[2])) // middle only or all on
    error = 0;
  else if (tape_detected[0] || tape_detected[1] || tape_detected[2]) // something on
  {
    error = tape_detected[0] * -4 + tape_detected[2] * 4;
    if (tape_detected[0])
      prevSide = -1;
    if (tape_detected[2])
      prevSide = 1;

    if (tape_detected[1])
      error /= 2;
  }
  else // all off
  {
    error = prevSide * 10;
  }

  // error = (tape_detected[0] * 10.0 * (tape_left - tape_thresholds[0]) / tape_max[1] + tape_detected[2] * 10.0 * (tape_thresholds[2] - tape_right) / tape_max[2]);
  // if (tape_detected[1])
  // { // Middle is on tape
  //   if (error > 0)
  //     error -= error * (tape_middle - tape_thresholds[1]) / tape_max[2];
  //   else
  //     error += error * (tape_middle - tape_thresholds[1]) / tape_max[2];
  // }
  // if (!tape_detected[0] && !tape_detected[1] && !tape_detected[2]) // off tape completely
  // {
  //   error = prevError * 1.5; // Increase error
  // }
  // else if (tape_right < prev_tape[2] && !tape_detected[1]) // Adjust for right sensor, decrease only if middle is detected
  //   error = prevError;
  // else if (tape_left < prev_tape[0] && !tape_detected[1]) // Adjust for left sensor
  //   error = prevError;

  if (error > 10)
    error = 10;
  else if (error < -10)
    error = -10;

  derivative = error - prevError;
  integral = error + integral;

  // Windup
  if (integral > 50)
    integral = 50;
  else if (integral < -50)
    integral = -50;

  prevError = error;
  prev_tape[0] = tape_left;
  prev_tape[1] = tape_middle;
  prev_tape[2] = tape_right;

  speedInc = error * tape_pid[0] + derivative * tape_pid[1] + integral * tape_pid[2];

  // Avoid switching directions!!
  if (speedInc > -tape_speed)
    speedInc = -tape_speed;
  else if (speedInc < tape_speed)
    speedInc = tape_speed;

  if (drive)
  {
    runMotors(tape_speed - speedInc, 'l');
    runMotors(tape_speed + speedInc, 'r');
  }
}